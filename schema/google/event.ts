import { z } from 'zod';

/**
 * Google Calendar List Entry Schema
 * Represents metadata for a single calendar that appears on the user's calendar list.
 * This includes user-specific properties such as color or notifications for new events.
 */
export const GoogleCalendarListEntrySchema = z.object({
    /**
     * Identifier of the calendar.
     * Use "primary" to access the primary calendar of the currently logged in user.
     */
    id: z.string().nullable().optional().describe('Calendar identifier'),

    /**
     * Title of the calendar.
     * This is the display name shown in the calendar UI.
     */
    summary: z.string().nullable().optional().describe('Calendar title/display name'),
});

/**
 * Google Calendar Event Reminder Schema
 * Represents a reminder for a calendar event.
 */
export const GoogleCalendarEventReminderSchema = z.object({
    /**
     * The method used to deliver the reminder.
     * - "email" - Reminders are sent via email
     * - "popup" - Reminders are sent via a UI popup
     */
    method: z.enum(['email', 'popup']).describe('Reminder delivery method'),

    /**
     * Number of minutes before the start of the event when the reminder should trigger.
     * Required when adding a reminder.
     */
    minutes: z.number().describe('Minutes before event start when reminder triggers'),
});

/**
 * Google Calendar Event Attendee Schema
 * Represents an attendee of a calendar event.
 */
export const GoogleCalendarEventAttendeeSchema = z.object({
    /**
     * The attendee's email address, as per RFC5322.
     * Required when adding an attendee.
     */
    email: z.string().nullable().optional().describe('Attendee email address (RFC5322 format)'),

    /**
     * The attendee's response status. Possible values:
     * - "needsAction" - The attendee has not responded to the invitation (recommended for new events)
     * - "declined" - The attendee has declined the invitation
     * - "tentative" - The attendee has tentatively accepted the invitation
     * - "accepted" - The attendee has accepted the invitation
     */
    responseStatus: z
        .string()
        .nullable()
        .optional()
        .describe('Attendee response status to the invitation'),
});

/**
 * Google Calendar Event Schema
 * Represents an event on a calendar containing information such as title, start and end times, and attendees.
 * Events can be either single events or recurring events.
 */
export const GoogleCalendarEventSchema = z.object({
    /**
     * Opaque identifier of the event.
     * When creating new events, you can specify your own IDs following these rules:
     * - Characters allowed: lowercase letters a-v and digits 0-9 (base32hex encoding)
     * - Length must be between 5 and 1024 characters
     * - Must be unique per calendar
     * If not specified, will be automatically generated by the server.
     */
    id: z
        .string()
        .nullable()
        .optional()
        .describe('Event identifier (auto-generated if not specified)'),

    /**
     * Title of the event.
     * This is the main display text shown for the event in calendar views.
     */
    summary: z.string().nullable().optional().describe('Event title/summary'),

    /**
     * The (inclusive) start time of the event.
     * For a recurring event, this is the start time of the first instance.
     */
    start: z
        .object({
            /**
             * The time as a combined date-time value (formatted according to RFC3339).
             * A time zone offset is required unless a time zone is explicitly specified in timeZone.
             * Used for timed events.
             */
            dateTime: z
                .string()
                .nullable()
                .optional()
                .describe('Start date and time (RFC3339 format)'),

            /**
             * The date, in the format "yyyy-mm-dd", if this is an all-day event.
             * Used for all-day events.
             */
            date: z
                .string()
                .nullable()
                .optional()
                .describe('Start date for all-day events (yyyy-mm-dd format)'),

            /**
             * The time zone in which the time is specified (formatted as an IANA Time Zone Database name).
             * For example: "Europe/Zurich". For recurring events, this field is required.
             */
            timeZone: z
                .string()
                .nullable()
                .optional()
                .describe('Time zone (IANA format, e.g., "America/New_York")'),
        })
        .optional()
        .describe('Event start time information'),

    /**
     * The (exclusive) end time of the event.
     * For a recurring event, this is the end time of the first instance.
     */
    end: z
        .object({
            /**
             * The time as a combined date-time value (formatted according to RFC3339).
             * A time zone offset is required unless a time zone is explicitly specified in timeZone.
             * Used for timed events.
             */
            dateTime: z
                .string()
                .nullable()
                .optional()
                .describe('End date and time (RFC3339 format)'),

            /**
             * The date, in the format "yyyy-mm-dd", if this is an all-day event.
             * Used for all-day events.
             */
            date: z
                .string()
                .nullable()
                .optional()
                .describe('End date for all-day events (yyyy-mm-dd format)'),

            /**
             * The time zone in which the time is specified (formatted as an IANA Time Zone Database name).
             * For example: "Europe/Zurich". For recurring events, this field is required.
             */
            timeZone: z
                .string()
                .nullable()
                .optional()
                .describe('Time zone (IANA format, e.g., "America/New_York")'),
        })
        .optional()
        .describe('Event end time information'),

    /**
     * Geographic location of the event as free-form text.
     * Can include address, building name, or any location description.
     */
    location: z.string().nullable().optional().describe('Event location (free-form text)'),

    /**
     * The attendees of the event.
     * See the Events with attendees guide for more information on scheduling events with other calendar users.
     */
    attendees: z
        .array(GoogleCalendarEventAttendeeSchema)
        .nullable()
        .optional()
        .describe('List of event attendees'),

    /**
     * The color of the event.
     * This is an ID referring to an entry in the event section of the colors definition.
     * Must correspond to a valid color ID from the colors API.
     */
    colorId: z.string().nullable().optional().describe('Event color ID (from colors API)'),

    /**
     * Information about the event's reminders for the authenticated user.
     * Note that changing reminders will not cause the event's updated property to change.
     */
    reminders: z
        .object({
            /**
             * Whether the default reminders of the calendar apply to the event.
             * When true, uses the calendar's default reminder settings.
             */
            useDefault: z.boolean().describe('Whether to use calendar default reminders'),

            /**
             * If useDefault is False, this list specifies which reminders to apply to the event.
             * Up to 5 reminders can be specified. Required if useDefault is False.
             */
            overrides: z
                .array(GoogleCalendarEventReminderSchema)
                .optional()
                .describe('Custom reminder overrides (up to 5)'),
        })
        .optional()
        .describe('Event reminder settings'),

    /**
     * List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545.
     * Note that DTSTART and DTEND lines are not allowed in this field;
     * event start and end times are specified in the start and end fields.
     * This field is omitted for single events or instances of recurring events.
     */
    recurrence: z
        .array(z.string())
        .nullable()
        .optional()
        .describe('Recurrence rules (RFC5545 format)'),
});

import {
    pgTable,
    serial,
    integer,
    varchar,
    text,
    timestamp,
    boolean,
    index,
} from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import { user } from '@/db/schema/auth';

/**
 * Preferences Table - ONLY fast lookup stuff that impacts availability/scheduling
 */
export const preferences = pgTable(
    'preferences',
    {
        id: serial('id').primaryKey(),
        userId: text('user_id').references(() => user.id, {
            onDelete: 'cascade',
        }),

        // Preference document for handling availability/scheduling
        document: text('document').notNull(),

        // Display name is used for the user's display name in the UI
        displayName: varchar('display_name', { length: 255 }),
        // Nickname is used for the user's display name in the email
        nickname: varchar('nickname', { length: 255 }),
        // Signature is used for the user's signature in the email
        signature: text('signature'),

        // Fast availability/scheduling lookups
        timezone: varchar('timezone', { length: 100 }),
        minNoticeMinutes: integer('min_notice_minutes').default(120),
        maxDaysAhead: integer('max_days_ahead').default(60),

        // Default meeting settings
        defaultMeetingDurationMinutes: integer('default_meeting_duration_minutes').default(30),

        // Buffer settings
        // Virtual Meetings
        virtualBufferMinutes: integer('virtual_buffer_minutes').default(0),

        // In-person Meetings
        inPersonBufferMinutes: integer('in_person_buffer_minutes').default(15),

        // Back to Back Meetings
        backToBackBufferMinutes: integer('back_to_back_buffer_minutes').default(0),

        // Flight Schedules
        flightBufferMinutes: integer('flight_buffer_minutes').default(0),

        // Active flag - used for soft deletes
        isActive: boolean('is_active').default(true),
        createdAt: timestamp('created_at').defaultNow(),
        updatedAt: timestamp('updated_at').defaultNow(),
    },
    (table) => [index('idx_preferences_user_active').on(table.userId, table.isActive)],
);

/**
 * Relations - Only used for ORM
 */
export const preferencesRelations = relations(preferences, ({ one }) => ({
    user: one(user, {
        fields: [preferences.userId],
        references: [user.id],
    }),
}));

/**
 * Autogenerated zod schema
 */
export const insertPreferencesSchema = createInsertSchema(preferences);
export const selectPreferencesSchema = createSelectSchema(preferences);

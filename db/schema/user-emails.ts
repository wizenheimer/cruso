import { pgTable, serial, integer, varchar, timestamp, index } from 'drizzle-orm/pg-core';
import { users } from './users';
import { relations } from 'drizzle-orm';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';

// User Emails Table - Email aliases (globally unique)
export const userEmails = pgTable(
    'user_emails',
    {
        id: serial('id').primaryKey(),
        userId: integer('user_id').references(() => users.id, { onDelete: 'cascade' }),
        email: varchar('email', { length: 255 }).notNull().unique(),
        verifiedAt: timestamp('verified_at'),
        createdAt: timestamp('created_at').defaultNow(),
    },
    (table) => [
        index('idx_user_emails_email').on(table.email),
        index('idx_user_emails_user').on(table.userId),
    ],
);

// Relations - Only used for ORM
export const userEmailsRelations = relations(userEmails, ({ one }) => ({
    user: one(users, {
        fields: [userEmails.userId],
        references: [users.id],
    }),
}));

// Autogenerated zod schema
export const insertUserEmailSchema = createInsertSchema(userEmails);
export const selectUserEmailSchema = createSelectSchema(userEmails);

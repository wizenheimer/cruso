import { pgTable, serial, varchar, timestamp, index, text, boolean } from 'drizzle-orm/pg-core';
import { user } from '@/db/schema/auth';
import { relations } from 'drizzle-orm';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';

/**
 * User Emails Table - Email aliases (globally unique)
 */
export const userEmails = pgTable(
    'user_emails',
    {
        id: serial('id').primaryKey(),
        userId: text('user_id').references(() => user.id, {
            onDelete: 'cascade',
        }),
        email: varchar('email', { length: 255 }).notNull().unique(),
        isPrimary: boolean('is_primary').default(false),
        isActive: boolean('is_active').default(true),
        createdAt: timestamp('created_at').defaultNow(),
        updatedAt: timestamp('updated_at').defaultNow(),
    },
    (table) => [
        index('idx_user_emails_email').on(table.email),
        index('idx_user_emails_user').on(table.userId),
        index('idx_user_emails_user_active').on(table.userId, table.isActive),
    ],
);

/**
 * Relations - Only used for ORM
 */
export const userEmailsRelations = relations(userEmails, ({ one }) => ({
    user: one(user, {
        fields: [userEmails.userId],
        references: [user.id],
    }),
}));

/**
 * Autogenerated zod schema
 */
export const insertUserEmailSchema = createInsertSchema(userEmails);
export const selectUserEmailSchema = createSelectSchema(userEmails);

import {
    pgTable,
    serial,
    integer,
    varchar,
    date,
    time,
    timestamp,
    index,
    text,
} from 'drizzle-orm/pg-core';
import { user } from '@/db/schema/auth';
import { relations } from 'drizzle-orm';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';

/**
 * Availability Table - Flexible availability system (like Cal.com)
 */
export const availability = pgTable(
    'availability',
    {
        id: serial('id').primaryKey(),
        userId: text('user_id').references(() => user.id, {
            onDelete: 'cascade',
        }),
        days: integer('days').array(), // [1,2,3,4,5] for Mon-Fri
        date: date('date'), // For date-specific overrides
        startTime: time('start_time').notNull(),
        endTime: time('end_time').notNull(),
        timezone: varchar('timezone', { length: 100 }).notNull(),
        label: varchar('label', { length: 255 }), // "Work", "Personal", etc.
        createdAt: timestamp('created_at').defaultNow(),
        updatedAt: timestamp('updated_at').defaultNow(),
    },
    (table) => [
        index('idx_availability_user_days').on(table.userId, table.days),
        index('idx_availability_user_date').on(table.userId, table.date),
    ],
);

/**
 * Relations - Only used for ORM
 */
export const availabilityRelations = relations(availability, ({ one }) => ({
    user: one(user, {
        fields: [availability.userId],
        references: [user.id],
    }),
}));

/**
 * Autogenerated zod schema
 */
export const insertAvailabilitySchema = createInsertSchema(availability, {
    startTime: (schema) => schema.regex(/^\d{2}:\d{2}(:\d{2})?$/, 'Invalid time format'),
    endTime: (schema) => schema.regex(/^\d{2}:\d{2}(:\d{2})?$/, 'Invalid time format'),
    days: (schema) => schema.optional(),
});
export const selectAvailabilitySchema = createSelectSchema(availability);
